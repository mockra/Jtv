{"name":"Jtv","tagline":"Justin.TV API Gem","body":"# Jtv\r\n\r\nThis library provides a complete wrapper for the Justin.TV and Twitch.TV APIs.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'jtv'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install jtv\r\n\r\n## Justin.TV API Keys\r\n\r\nIf you want access to higher rate limits for your application, then you\r\nneed to sign up for a [Justin.TV developer account](http://www.justin.tv/developer/activate).\r\n\r\nOnce you have your API Keys, you can set them up using the configuration guide\r\nbelow.\r\n\r\n## Configuration\r\n\r\n```ruby\r\n  Jtv.configure do |config|\r\n    config.consumer_key = YOUR_CONSUMER_KEY\r\n    config.consumer_secret = YOUR_CONSUMER_SECRET\r\n  end\r\n```\r\n\r\nIf you want to make requests on behalf of a specific user, then you need to\r\ninstantiate a client.\r\n\r\n```ruby\r\n  @client = Jtv::Client.new oauth_token: 'users_token',\r\n    oauth_secret: 'users_secret'\r\n```\r\n\r\n## Usage\r\n\r\nThe Jtv gem offers various methods depending on the type of information\r\nyou're looking for.\r\n\r\nIt's recommended to cache your requests, and to always keep your\r\naccount's rate limit in mind.\r\n\r\nCheck out the [RDOC](http://rubydoc.info/github/Mockra/Jtv/).\r\n\r\n### Stream\r\n\r\n#### Summary\r\n\r\nReturns aggregate stream information for all live channels (possibly scoped by\r\ncategory).\r\n\r\n```ruby\r\n  Jtv.summary\r\n  # {\"average_bitrate\"=>0, \"streams_count\"=>4346, \"viewers_count\"=>\"142733\"}\r\n\r\n  Jtv.summary channel: 'mockra'\r\n  # {\"average_bitrate\"=>0, \"streams_count\"=>0, \"viewers_count\"=>0}\r\n```\r\n\r\nYou can include a channel, language, or category in your search params.\r\n\r\n#### List\r\n\r\nReturns stream information for all live channels. The results are sorted by the\r\ncurrent number of viewers, with the most popular channels first.\r\n\r\n```ruby\r\n  Jtv.list category: 'gaming', limit: 1\r\n  # [{'name' => 'live_user_wingsofdeath'...}]\r\n```\r\n\r\nYou can include a channel, category, title, language, limit, and offset.\r\n\r\n#### Search\r\n\r\nReturns stream information for the live channels that match a search query. The\r\nresults are sorted by the current number of viewers, with the most popular\r\nchannels first.\r\n\r\n```ruby\r\n  Jtv.search 'gaming', limit: 1\r\n  # [{'name' => 'live_user_steven_bonnell_ii'...}]\r\n```\r\n\r\nThe first argument is your search query, and you can also pass limit and offset\r\nas params.\r\n\r\n### User\r\n\r\n#### Show\r\n\r\nReturns extended information for a user, specified by user id or login.\r\n\r\n```ruby\r\n  Jtv.user_show 'mockra'\r\n  # {\"id\"=>22056792...}\r\n```\r\n\r\nPass in a user's login.\r\n\r\n#### Favorites\r\n\r\nGet all channels who are favorites of a user.\r\n\r\n```ruby\r\n  Jtv.favorites 'mockra'\r\n  # [{}]\r\n```\r\n\r\nPass in a user's login.\r\n\r\n### Channel\r\n\r\n#### Show\r\n\r\nReturns extended information for a channel, specified by channel id or login.\r\nRequires OAuth authentication for private channels.\r\n\r\n```ruby\r\n  Jtv.channel_show 'apidemo'\r\n  # {'login'=>'apidemo'...}\r\n```\r\n\r\nPass in a login or id for the channel.\r\n\r\n#### Fans\r\n\r\nGet users who are fans of a channel. Requires OAuth authentication for private\r\nchannels.\r\n\r\n```ruby\r\n  Jtv.fans id: 'officecam'\r\n  # [{'id'=>23}]\r\n```\r\n\r\nLogin must be included for the channel. Optional limit and offset params\r\n(defaults are 20 for limit and 0 for offset). Results returned are limited to\r\n100. Results are returned in create date order.\r\n\r\n#### Archives\r\n\r\nGet archives from a given channel. Requires OAuth authentication for private\r\nchannels.\r\n\r\n```ruby\r\n  Jtv.archives id: 'dotahut', limit: 2\r\n  # [{'video_codec' => 'AVC'}, {}]\r\n```\r\n\r\nchannel id or login must be included as a param. Optional limit and offset\r\nparams (defaults are 20 for limit and 0 for offset). Results returned are\r\nlimited to 100. Results are returned in create date order\r\n\r\n#### Embed\r\n\r\nGet embed code for a channel.\r\n\r\n```ruby\r\n  Jtv.embed 'justin', volume: 50\r\n  # \"<object></object>\"\r\n```\r\n\r\nYou can supply params volume, publisher_guard (for the default channel password\r\nto try), height, width, and watermark_position\r\n\r\n#### Chat Embed\r\n\r\nGet chat embed code for a channel.\r\n\r\n```ruby\r\n  Jtv.chat_embed 'justin', height: 1000\r\n  # \"<iframe></iframe>\"\r\n```\r\n\r\nYou can supply params height and width.\r\n\r\n## Contributing\r\n\r\nContributions and feedback are more than welcome and highly encouraged.\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Contact\r\n\r\n[david@mockra.com](mailto:david@mockra.com)\r\n\r\n[@Mockra_](http://twitter.com/#!/mockra_)\r\n\r\n[mockra.com](http://mockra.com)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}